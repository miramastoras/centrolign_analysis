from ete3 import Tree
import argparse

def arg_parser():
    '''
    Parses command line arguments with argparse
    '''
    parser = argparse.ArgumentParser(
        prog='scale_branch_lengths.py',
        description="""rescales branch lengths in new tree to match old tree""")

    parser.add_argument("-t", "--full_tree",
                        required=True,
                        help="Full input tree in newick format.")
    parser.add_argument("-n", "--new_tree",
                        required=True,
                        help="single input tree generated by infer_tree.py")
    parser.add_argument("-i", "--included_samples",
                        required=True,
                        help="List of all samples to include in the output tree. Any samples not in this list will be pruned from the full tree prior to reordering the provided subtree.")
    parser.add_argument("-o", "--output",
                        required=True,
                        help="output newick file to write modified full tree to")

    return parser.parse_args()

def calc_avg_root_to_leaf_dist(tree):
    # Get all leaf nodes
    leaves = tree.get_leaves()

    # Calculate the distance for each leaf from the root
    total_distance = 0
    for leaf in leaves:
        total_distance += tree.get_distance(leaf)

    # Calculate average distance
    average_distance = total_distance / len(leaves)
    return average_distance

def main():
    # parse command line arguments
    args = arg_parser()

    # read in samples to include in output tree
    with open(args.included_samples, 'r') as file:
        included_samples = [line.strip() for line in file]

    # Prune the full tree to retain only the samples that should be included in the output tree
    tree = Tree(args.full_tree, format=1)
    tree.prune(included_samples, preserve_branch_length=True)

    orig_root_to_leaf_avg = calc_avg_root_to_leaf_dist(tree)

    # Load the new tree
    newtree = Tree(args.new_tree, format=1)

    # get re-estimated root to leaf avg dist
    re_estimated_root_to_leaf=calc_avg_root_to_leaf_dist(newtree)

    # re-scale branch lengths in new subtree to match original tree
    for node in newtree.traverse():
        node.dist = node.dist * ((orig_root_to_leaf_avg) / (re_estimated_root_to_leaf))
        if node.dist == 0:
            node.dist = 1

    # Write the modified tree to a new file
    newtree.write(outfile=args.output, format=5)

if __name__ == '__main__':
    main()